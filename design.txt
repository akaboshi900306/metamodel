Have element 'root' with fields loaded by model.

Model is a dictionary classname => class.

== Usecase: transform ==
Pre-condtitions:
 - There is a meta object factory
 - There are a source and target meta-model (possibly, the source and target meta-model are the same )
 - There is an instance of the source meta-model
 - There are transformation rules from the source meta-model to the target meta-model
Trigger:
 - Run transformation script
Guarantee:
 - An instance of the target model is created and stored as a file
Main Scenario:
 1. The meta object factory module is loaded/imported
   Ex: import metamodel
 2. The source and target meta models are loaded
   Ex: petrinetsmodel = metamodel.load("petrinets.m3")
 3. The source instance is loaded
   Ex. petrinet = petrinetsmodel.load("petrinet.m2")
 4. The transformation rules from source to target meta-model are specified
 5. Transformation rules are applied to the source instance
 6. The created target instance is written out to a file
Alternatives:
 - There is an error in one of the preconditions
   1. The instance of the target model is not stored as a file
   2. A description is printed of what went wrong.
   
   

